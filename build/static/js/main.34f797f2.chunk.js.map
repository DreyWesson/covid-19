{"version":3,"sources":["components/InfoBox.js","components/LineGraph.js","components/Table.js","util.js","components/Map.js","App.js","reportWebVitals.js","actions/actionTypes.js","reducers/scrollReducer.js","reducers/rootReducer.js","index.js"],"names":["InfoBox","title","isRed","cases","active","total","props","Card","onClick","className","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","casesType","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","res","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sort","b","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","MapContainer","TileLayer","url","attribution","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","actionTypes","initialState","hideOnScroll","scrollReducer","state","action","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kZA2BeA,EAvBC,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,MAAUC,EAAY,0DACpE,OACE,cAACC,EAAA,EAAD,CACEC,QAASF,EAAME,QACfC,UAAS,kBAAaL,GAAU,oBAAvB,YACPF,GAAS,gBAHb,SAME,eAACQ,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,gBAA7C,SACGX,IAEH,oBAAIQ,UAAS,0BAAqBP,GAAS,yBAA3C,SACGC,IAEH,eAACQ,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,gBAA7C,UACGP,EADH,kB,kCCdFQ,EAAU,CACdC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,MAAO,CACLC,OAAQ,IAGZC,qBAAqB,EACrBC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,UAAW,CACTC,MAAO,SAAUC,EAAaC,GAC5B,OAAOC,IAAQF,EAAYG,OAAOC,OAAO,WAI/CC,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,OACNC,KAAM,CACJJ,OAAQ,WACRK,cAAe,QAIrBC,MAAO,CACL,CACEC,UAAW,CACTrB,SAAS,GAEXsB,MAAO,CACLC,SAAU,SAAUV,EAAOW,EAAOC,GAChC,OAAOb,IAAQC,GAAOC,OAAO,YAQnCY,EAAiB,SAACf,GAA+B,IAEjDgB,EAFwBC,EAAwB,uDAAZ,QAClCC,EAAY,GAElB,IAAK,IAAIC,KAAQnB,EAAKvB,MAAO,CAC3B,GAAIuC,EAAe,CACjB,IAAMI,EAAe,CACnBC,EAAGF,EACHG,EAAGtB,EAAKiB,GAAWE,GAAQH,GAE7BE,EAAUK,KAAKH,GAEjBJ,EAAgBhB,EAAKiB,GAAWE,GAElC,OAAOD,GAsCMM,EAnCG,SAAC,GAAuC,IAAD,IAApCP,iBAAoC,MAAxB,QAAwB,EAAZrC,EAAY,+BAC/B6C,mBAAS,IADsB,mBAChDzB,EADgD,KAC1C0B,EAD0C,KAevD,OAZAC,qBAAU,YACO,uCAAG,sBAAAC,EAAA,sEACVC,MAAM,8DACTC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAC9B,GACL,IAAIkB,EAAYH,EAAef,EAAMiB,GACrCS,EAAQR,MALI,2CAAH,qDAQfe,KACC,CAAChB,IAGF,qBAAKlC,UAAWH,EAAMG,UAAtB,UACO,OAAJiB,QAAI,IAAJA,OAAA,EAAAA,EAAMkC,QAAS,GACd,cAAC,OAAD,CACElC,KAAM,CACJmC,SAAU,CACR,CACEC,gBAAiB,sBACjBC,YAAa,UACbrC,KAAMA,KAIZb,QAASA,OC1EJmD,G,OAfD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACf,OACE,qBAAKxD,UAAU,QAAf,SACGwD,EAAUC,KAAI,gBAAGC,EAAH,EAAGA,QAAShE,EAAZ,EAAYA,MAAZ,OACb,+BACE,6BAAKgE,IACL,6BACE,iCAASxC,IAAQxB,GAAO0B,OAAO,qB,0BCPrCuC,EAAkB,CACtBjE,MAAO,CACLkE,IAAK,UACLC,WAAY,KAEdC,UAAW,CACTF,IAAK,UACLC,WAAY,MAEdE,OAAQ,CACNH,IAAK,UACLC,WAAY,MAIHG,EAAW,SAAC/C,GAEvB,OADgB,YAAOA,GACLgD,MAAK,SAACpB,EAAGqB,GAAJ,OAAWrB,EAAEnD,MAAQwE,EAAExE,OAAS,EAAI,MAGhDyE,EAAkB,SAACC,GAC9B,OAAOA,EAAI,WAAOlD,IAAQkD,GAAMhD,OAAO,SAAY,MAQ9C,IAAMiD,EAAgB,SAACpD,GAA+B,IAAzBiB,EAAwB,uDAAZ,QAC9C,OAAOjB,EAAKwC,KAAI,SAACC,GAAD,OACd,cAACY,EAAA,EAAD,CACEC,OAAQ,CAACb,EAAQc,YAAYC,IAAKf,EAAQc,YAAYE,MACtDC,YAAa,GACbxE,MAAOwD,EAAgBzB,GAAW0B,IAClCgB,UAAWjB,EAAgBzB,GAAW0B,IACtCnD,OAAQoE,KAAKC,KACXpB,EAAQxB,GAAayB,EAAgBzB,GAAW2B,YANpD,SASE,cAACkB,EAAA,EAAD,UACE,sBAAK/E,UAAU,iBAAf,UACE,qBACEA,UAAU,YACVgF,MAAO,CAAEC,gBAAgB,OAAD,OAASvB,EAAQc,YAAYU,KAA7B,QAE1B,qBAAKlF,UAAU,YAAf,SAA4B0D,EAAQA,UACpC,sBAAK1D,UAAU,iBAAf,oBACUkB,IAAQwC,EAAQhE,OAAO0B,OAAO,UAExC,sBAAKpB,UAAU,iBAAf,wBACckB,IAAQwC,EAAQI,WAAW1C,OAAO,UAEhD,sBAAKpB,UAAU,YAAf,qBACWkB,IAAQwC,EAAQK,QAAQ3C,OAAO,qB,2BCvCrC+D,EAdH,SAAC,GAA4C,IAA1C3B,EAAyC,EAAzCA,UAAWtB,EAA8B,EAA9BA,UAAWqC,EAAmB,EAAnBA,OAAQa,EAAW,EAAXA,KAC3C,OACE,qBAAKpF,UAAU,MAAf,SACE,eAACqF,EAAA,EAAD,CAAcd,OAAQA,EAAQa,KAAMA,EAApC,UACE,cAACE,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAEbnB,EAAcb,EAAWtB,S,OC6HnBuD,MAzHf,WAAgB,IAAD,EACqB/C,mBAAS,IAD9B,mBACNc,EADM,KACKkC,EADL,OAEahD,mBAAS,aAFtB,mBAEVgB,EAFU,KAEDiC,EAFC,OAGqBjD,mBAAS,IAH9B,mBAGV8B,EAHU,KAGGoB,EAHH,OAIiBlD,mBAAS,IAJ1B,mBAIVmD,EAJU,KAICC,EAJD,OAKiBpD,mBAAS,CAAE+B,KAAM,SAAUsB,KAAM,UALlD,mBAKVC,EALU,KAKCC,EALD,OAMavD,mBAAS,GANtB,mBAMVwD,EANU,KAMDC,EANC,OAOuBzD,mBAAS,IAPhC,mBAOV0D,EAPU,KAOIC,EAPJ,OAQiB3D,mBAAS,SAR1B,mBAQVR,EARU,KAQCoE,EARD,KAUb1D,qBAAU,WACRE,MAAM,sCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAC9B,GAAD,OAAU2E,EAAe3E,QAChC,IAEH2B,qBAAU,YACc,uCAAG,sBAAAC,EAAA,sDACvBC,MAAM,4CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAC9B,GACL,IAAMuC,EAAYvC,EAAKwC,KAAI,SAACC,GAAD,MAAc,CACvC6C,KAAM7C,EAAQA,QACdvC,MAAOuC,EAAQc,YAAYgC,SAEzBC,EAAazC,EAAS/C,GAC1B6E,EAAaW,GACbJ,EAAgBpF,GAChByE,EAAalC,MAXM,2CAAH,qDActBkD,KACC,IAEH,IAAMC,EAAe,uCAAG,WAAOC,GAAP,iBAAA/D,EAAA,6DAChBgE,EAAcD,EAAEE,OAAO3F,MAC7BwE,EAAWkB,GACLtB,EACY,cAAhBsB,EAAA,wFAEgDA,GAN5B,SAQhB/D,MAAMyC,GACTxC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAC9B,GACL0E,EAAWkB,GACXjB,EAAe3E,GACfgF,EAAa,CAAChF,EAAKuD,YAAYC,IAAKxD,EAAKuD,YAAYE,OACrDyB,EAAW,MAdO,2CAAH,sDAoBrB,OAHAY,QAAQC,IAAIhB,GACZe,QAAQC,IAAId,GACZa,QAAQC,IAAI9E,GAEV,sBAAKlC,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,cAAf,UACE,kDAEA,cAACiH,EAAA,EAAD,CAAajH,UAAU,gBAAvB,SACE,eAACkH,EAAA,EAAD,CACEC,QAAQ,WACRhG,MAAOuC,EACP0D,SAAUT,EAHZ,UAKE,cAACU,EAAA,EAAD,CAAUlG,MAAM,YAAhB,uBACCqC,EAAUC,KAAI,SAACC,GAAD,OACb,cAAC2D,EAAA,EAAD,CAAUlG,MAAOuC,EAAQvC,MAAzB,SAAiCuC,EAAQ6C,kBAKjD,sBAAKvG,UAAU,aAAf,UACE,cAAC,EAAD,CACEA,UAAU,eACVP,OAAK,EACLE,OAAsB,UAAduC,EACRnC,QAAS,SAAC6G,GAAD,OAAON,EAAa,UAC7B9G,MAAO,cACPI,MAAOsB,IAAQsD,EAAY9E,OAAO0B,OAAO,OACzC1B,MAAOyE,EAAgBK,EAAY8C,cAErC,cAAC,EAAD,CACEtH,UAAU,eACVL,OAAsB,cAAduC,EACRnC,QAAS,SAAC6G,GAAD,OAAON,EAAa,cAC7B9G,MAAO,YACPI,MAAOsB,IAAQsD,EAAYV,WAAW1C,OAAO,OAC7C1B,MAAOyE,EAAgBK,EAAY+C,kBAErC,cAAC,EAAD,CACEvH,UAAU,eACVP,OAAK,EACLE,OAAsB,WAAduC,EACRnC,QAAS,SAAC6G,GAAD,OAAON,EAAa,WAC7B9G,MAAO,SACPI,MAAOsB,IAAQsD,EAAYT,QAAQ3C,OAAO,OAC1C1B,MAAOyE,EAAgBK,EAAYgD,kBAIvC,cAAC,EAAD,CACEtF,UAAWA,EACXsB,UAAW4C,EACX7B,OAAQyB,EACRZ,KAAMc,OAGV,cAACpG,EAAA,EAAD,CAAME,UAAU,aAAhB,SACE,eAACC,EAAA,EAAD,WACE,uDACA,cAAC,EAAD,CAAOuD,UAAWqC,IAClB,qBAAI7F,UAAU,kBAAd,2BAA+CkC,KAC/C,cAAC,EAAD,CAAWlC,UAAU,aAAakC,UAAWA,aCvHxCuF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5E,MAAK,YAAkD,IAA/C6E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,wBCPDO,EACC,aCCDC,EAAe,CAC1BC,aAAc,MAgBDC,EAbO,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAEtD,OADAvB,QAAQC,IAAI,yCAAsBsB,GAC1BA,EAAO/G,MACb,KAAK0G,EACH,OAAO,2BACFI,GADL,IAEEF,aAAcG,EAAOH,eAEzB,QACE,OAAOE,ICXEE,EAFKC,YAAgB,CAAEJ,kB,QCQhCK,EAAQC,YAAYH,EAAaI,YAAgBC,MACvD7B,QAAQC,IAAI,4DAAyCyB,EAAMI,YAE3DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,SAM1BzB,K","file":"static/js/main.34f797f2.chunk.js","sourcesContent":["import \"./InfoBox.css\";\nimport React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nconst InfoBox = ({ title, isRed, cases, active, total, ...props }) => {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default InfoBox;\n","import \"./LineGraph.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType = \"cases\") => {\n  const chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      const newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nconst LineGraph = ({ casesType = \"cases\", ...props }) => {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(`https://disease.sh/v3/covid-19/historical/all?lastdays=120`)\n        .then((res) => res.json())\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204,16,52,0.5)\",\n                borderColor: \"#cc1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LineGraph;\n","import \"./Table.css\";\nimport numeral from \"numeral\";\nimport React from \"react\";\n\nconst Table = ({ countries }) => {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => (\n        <tr>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#cc1034\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    multiplier: 800,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n\nexport const prettyPrintStat = (stat) => {\n  return stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n};\n\nexport function numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\n// DRAW circles on the map with interactive tooltip\nexport const showDataOnMap = (data, casesType = \"cases\") => {\n  return data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={Math.sqrt(\n        country[casesType] * casesTypeColors[casesType].multiplier\n      )}\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-name\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n};\n","import \"./Map.css\";\nimport React from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from \"../util\";\n\nconst Map = ({ countries, casesType, center, zoom }) => {\n  return (\n    <div className=\"map\">\n      <MapContainer center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default Map;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox\";\nimport LineGraph from \"./components/LineGraph\";\nimport Table from \"./components/Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport Map from \"./components/Map\";\nimport \"leaflet/dist/leaflet.css\";\nimport numeral from \"numeral\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]),\n    [country, setCountry] = useState(\"Worldwide\"),\n    [countryInfo, setCountryInfo] = useState({}),\n    [tableData, setTableData] = useState([]),\n    [mapCenter, setMapCenter] = useState({ lat: -34.80746, lng: -40.4796 }),\n    [mapZoom, setMapZoom] = useState(3),\n    [mapCountries, setMapCountries] = useState([]),\n    [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((res) => res.json())\n      .then((data) => setCountryInfo(data));\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((res) => res.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    setCountry(countryCode);\n    const url =\n      countryCode === \"worldwide\"\n        ? `https://disease.sh/v3/covid-19/all`\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n  console.log(mapCenter);\n  console.log(mapZoom);\n  console.log(casesType);\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"Worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            className=\"app__infoBox\"\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title={\"Coronavirus\"}\n            total={numeral(countryInfo.cases).format(\"0,0\")}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n          />\n          <InfoBox\n            className=\"app__infoBox\"\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title={\"Recovered\"}\n            total={numeral(countryInfo.recovered).format(\"0,0\")}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n          />\n          <InfoBox\n            className=\"app__infoBox\"\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title={\"Deaths\"}\n            total={numeral(countryInfo.deaths).format(\"0,0\")}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n          />\n        </div>\n\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__rightGraph\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const actionTypes = {\n  SET_SCROLL: \"SET_SCROLL\",\n};\n","import { actionTypes } from \"../actions/actionTypes\";\n\nexport const initialState = {\n  hideOnScroll: null,\n};\n\nconst scrollReducer = (state = initialState, action) => {\n  console.log(\"💪Scroll Action💪 \", action);\n  switch (action.type) {\n    case actionTypes.SET_SCROLL:\n      return {\n        ...state,\n        hideOnScroll: action.hideOnScroll,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default scrollReducer;\n","import { combineReducers } from \"redux\";\nimport scrollReducer from \"./scrollReducer\";\nconst rootReducer = combineReducers({ scrollReducer });\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nconsole.log(\"👇List of Reducers Stored in STATE 👇\", store.getState());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}